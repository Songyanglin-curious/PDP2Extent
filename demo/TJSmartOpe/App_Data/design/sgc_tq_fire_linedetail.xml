<?xml version="1.0" encoding="utf-8"?>
<root maxid="20" desc="空白页">
  <inits>
    <init id="lineid" type="request" arg="lineid"></init>
    <init id="linename" type="request" arg="linename"></init>
    <init id="voltage" type="request" arg="voltage"></init>
    <init id="starttime" type="request" arg="starttime"></init>
    <init id="endtime" type="request" arg="endtime"></init>
    <init id="main" type="request" arg="main"></init>
  </inits>
  <datasources>
    <datasource id="ds50" desc="线路告警" db="SGDISTRICT" type="xml" node="sgc/fire:GetLineWarn">
      <cols>
        <col id="col_if_id" name="lineid" from="lineid"></col>
        <col id="col_if_starttime" name="starttime" from="starttime"></col>
        <col id="col_if_endtime" name="endtime" from="endtime"></col>
        <col id="col_start_time" name="start_time" desc="start_time"></col>
        <col id="col_end_time" name="end_time" desc="end_time"></col>
        <col id="col_firening_time" name="firening_time" desc="firening_time"></col>
        <col id="col_fault_id" name="fault_id" desc="fault_id"></col>
      </cols>
    </datasource>
  </datasources>
  <ctrls>
    <div id="div0" desc="根容器">
      <a s_height="100%" s_width="100%"></a>
      <c>
        <label desc="文字" id="label19" from="linename">
          <a ref="labelTC" class="pdpLabel" value="100%" s_font-size="16px" s_color="#7ddafd" s_margin-left="10px"></a>
        </label>
        <div id="div2" desc="容器">
          <a s_padding="5px"></a>
          <c>
            <itable id="itable3" desc="iview表格" from="ds50">
              <sa stripe="true" max-height="600"></sa>
              <e>
                <on-row-click>
                  <list type="script">
                    <value>
                      <![CDATA[this.clickRow(row);]]>
                    </value>
                  </list>
                </on-row-click>
              </e>
              <c>
                <icol desc="告警时间" from="col_start_time">
                  <a s_text-align="center"></a>
                </icol>
                <icol desc="最后记录时间" from="col_end_time">
                  <a s_text-align="center"></a>
                </icol>
                <icol desc="持续时长">
                  <a key="keeptime" width="100px"></a>
                  <label from="col_end_time">
                    <sf from="page.getKeepTime(params.row)"></sf>
                  </label>
                </icol>
                <icol desc="告警等级" from="col_firening_time">
                  <a width="100" s_text-align="center"></a>
                  <label from="col_firening_time">
                    <sf from="page.getWarnLevel({0})"></sf>
                  </label>
                </icol>
                <icol desc="关联故障" from="col_fault_id" show="false">
                  <a width="80" s_text-align="center"></a>
                  <img>
                    <a src="/i/sgc/icon/fault/line_ing.png" s_width="16px" s_height="16px" s_cursor="pointer"></a>
                    <sa s_display="col_fault_id"></sa>
                    <sf s_display="{0}?'':'none'"></sf>
                    <e>
                      <onclick>
                        <list type="script" value="this.showCard();"></list>
                      </onclick>
                    </e>
                  </img>
                </icol>
              </c>
            </itable>
          </c>
        </div>
      </c>
    </div>
  </ctrls>
  <scripts>
    <script event="created">
      <list type="select" ds="ds50"></list>
      <list type="script">
        <value>
          <![CDATA[          
this.getKeepTime = function(row) {
  if ((row.start_time >= row.end_time)||(!row.end_time)) return "";
return Ysh.Number.toFixed(Ysh.Time.diff("mi",new Date(Ysh.Time.parseDate(row.start_time)),new Date(Ysh.Time.parseDate(row.end_time)))/60.0,2) + "小时";
}
this.getWarnLevel = function (times) {
return times;
    times = parseInt(times, 10);
    return (times > 5) ? "一级" : ((times > 2) ? "二级" : "");
}
this.clickRow = function(row) {
this.showTower = true;
if (this.main)
  this.main.showLineLight(this.lineid,row.start_time,Ysh.Time.add('ss',1, row.end_time));
return;
ProjectSGC.Map.postMessage({ eventType: "menuope", menuname: "showImageIcon", selstate: false,data: { type: "firetower"}});
var lineid = this.lineid;
var st = row.start_time;
var et = Ysh.Time.add('ss',1, row.end_time);
if (!this.showTower) {
  ProjectSGC.Map.locate("LINE", this.lineid);
  ProjectSGC.Map.postMessage({ eventType: "menuope", menuname: "showTowerLine", data: { lineid: this.lineid } });
}
    PDP.read("SGAPP", "sgc/fire:GetLineTower", [lineid, st, et], function (data) {
        if (!data.isOK) return;
        if (data.value.length == 0) return;
        var msg =[];//{ type: "firetower", image: { width: 30, height: 37.5, url: "/textures/coin/Pin.png" }, locateData: [{ lineid: "", towerid: "", data: {} }] };
        var towerids =[];
        for (var i = 0; i < data.value.length; i++) {
            var item = data.value[i];
            //var lon = item[0];
            //var lat = item[1];
            towerids.addSkipSame(item[0]);
            towerids.addSkipSame(item[1]);
        }
        for (var i = 0; i < towerids.length; i++) {
            msg.push({ lineid: lineid, towerid: towerids[i]});
        }
        ProjectSGC.Map.postMessage({ eventType: "menuope", menuname: "showImageIcon", selstate: true, data: { type: "firetower", paddingtop: -18, images: { width: 30, height: 37.5, imgUrl: "/textures/coin/Pin.png" }, locateData: msg }
    });
});
}
this.showCard = function () {
    var cardUrlInst = ProjectSGC.Global.getMainObject("cardUrlInst");
    if (!cardUrlInst) return;
    var devid = this.lineid
    var type = ProjectSGC.Meta.getTypeById(devid);
    cardUrlInst.showCardByPS({ card: "fault", args: { type: type, id: devid } }, this.getFaultCard, function () { });
}
        this.showLineCard = function(r) {
            var cardUrlInst = ProjectSGC.Global.getMainObject("cardUrlInst");
            if (!cardUrlInst) return;
        }
          
            ]]>
        </value>
      </list>
    </script>
    <script event="mounted">
      <list type="script">
        <value>
          <![CDATA[
                    
            ]]>
        </value>
      </list>
    </script>
    <script event="beforeDestroy">
      <list type="script">
        <value>
          <![CDATA[
          if (this.showTower) {
            //ProjectSGC.Map.postMessage({ eventType: "menuope", menuname: "showImageIcon", selstate: false,data: { type: "firetower"}});
            //ProjectSGC.Map.postMessage({ eventType: "menuope", menuname: "showTowerLine", data: { clear:true} });
            if (this.main) this.main.closeLine();
          }
          ]]>
        </value>
      </list>
    </script>
  </scripts>
</root>