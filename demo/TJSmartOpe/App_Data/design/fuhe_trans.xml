<?xml version="1.0" encoding="utf-8"?>
<root maxid="33" desc="负荷曲线">
	<inits>
		<init id="deviceid" desc="设备id" type="request" arg="deviceid"></init>
	</inits>
	<consts>
		<const id="arrX" desc="语句"></const>
		<const id="st" type="time" arg="y"></const>
		<const id="et" type="time" arg="d,d,1"></const>
		<const id="tempOption"></const>
		<const id="electricOption"></const>
	</consts>
	<datasources>
		<datasource type="load" id="loadAndElectric" desc="负荷和电量" node="sc/device_archives:GetLoadAndElectric">
			<cols>
				<col id="col_st" name="st" from="st"></col>
				<col id="col_et" name="et" from="et"></col>
				<col id="col_id" name="id" from="deviceid"></col>
				<col id="col_load" name="load" desc="load"></col>
				<col id="col_electric" name="electric" desc="electric"></col>
			</cols>
		</datasource>
		<datasource type="load" id="temps" desc="油温，环境温度" node="sc/device_archives:GetTemp">
			<cols>
				<col id="col_st" name="st" from="st"></col>
				<col id="col_et" name="et" from="et"></col>
				<col id="col_id" name="id" from="deviceid"></col>
				<col id="col_oil" name="oil" desc="oil"></col>
				<col id="col_environment" name="environment" desc="environment"></col>
			</cols>
		</datasource>
	</datasources>
	<ctrls>
		<div id="div0" desc="根容器">
			<a id="afuhe" s_height="700px" s_width="100%" s_padding="0px 10px"></a>
			<div desc="24小时负荷、电量">
				<a s_height="50px" s_width="100%" s_align-items="center" s_display="flex" s_justify-content="center"></a>
				<label>
					<a value="24小时负荷、电量" class="linearGradient"></a>
				</label>
			</div>
			<div>
				<a s_height="300px" s_width="100%"></a>
				<ecommonchart id="echart20" desc="图表">
					<sa option="electricOption"></sa>
				</ecommonchart>
			</div>
			<div desc="24小时油温、环境温度">
				<a s_height="50px" s_width="100%" s_align-items="center" s_display="flex" s_justify-content="center"></a>
				<label>
					<a value="24小时油温、环境温度" class="linearGradient"></a>
				</label>
			</div>
			<div>
				<a s_height="300px" s_width="100%"></a>
				<ecommonchart id="echart20" desc="图表">
					<sa option="tempOption"></sa>
				</ecommonchart>
			</div>
		</div>
	</ctrls>
	<scripts>
		<script event="created">
			<list type="script">
				<value>
					<![CDATA[
           this.arrX=new Array();
           this.arrX=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23];
           this.setTempOption = function(oils,environments,xlabel){
				var option = {
					"legend":{"show":true,textStyle:{color:'#f5efef'}},
				  	"grid":{"left":"60","top":"35","right":"50","bottom":"20"},
					"tooltip":{
						"trigger":"axis",
						"axisPointer":{"type":"shadow"},
						backgroundColor:'rgba(52,72,119,0.8)',
						borderColor:'rgb(53,76,147)',
						borderWidth:1,
						textStyle:{
							align:'left'
						},
						formatter: '时间: {b}<br /> {a0}: {c0}℃<br />{a1}: {c1}℃'
					},
					"xAxis":[
					{"name":"小时",
					"nameGap":"15",
					"type":"category",
					"axisLine":{"lineStyle":{"color":"#37A0BA"}},
					//"splitLine":{"lineStyle":{"color":"red"}},
					"axisLabel":{"color":"#37A0BA","interval":0,formatter: function (value) {
						return Ysh.Time.formatString(value,'000100');
					}},
					data:xlabel,
					}],	
					"yAxis":[
					{"type":"value",
					"name":"温度(℃)",
					"axisLine":{"lineStyle":{"color":"#37A0BA"}},
					"splitLine":{"lineStyle":{"color":"#37A0BA"}},
					"axisLabel":{"color":"#37A0BA","formatter":'{value}'}},
					/*
					{"type":"value",
					"name":"电量WMh",
					"axisLine":{"lineStyle":{"color":"#37A0BA"}},
					"splitLine":{"lineStyle":{"color":"#37A0BA"}},
					"axisLabel":{"color":"#37A0BA",showMinLabel:false}}*/
					],
					"series":[
						{"name":"油温",
						"type":"line",
						"yAxisIndex":0,
						itemStyle: {
							color: "#a90000"
							},
						data: oils
						},
						{"name":"温度",
						"type":"line",
						"yAxisIndex":0,
						color:'yellow',
						data: environments
						},
					],
					
				}
				return option
			}
			this.setElectricsOption = function(loads,electrics,xlabel){
				var option = {
					"legend":{"show":false,textStyle:{color:'#f5efef'}},
					"grid":{"left":"60","top":"35","right":"50","bottom":"20"},
					"tooltip":{
					   "trigger":"axis",
					   "axisPointer":{"type":"shadow"},
						backgroundColor:'rgba(52,72,119,0.8)',
						borderColor:'rgb(53,76,147)',
						borderWidth:1,
						textStyle:{
							align:'left'
						},
						formatter: '时间: {b}点<br /> {a0}: {c0}MW<br />{a1}: {c1}MWh'
					},
					"xAxis":[
					{"name":"小时",
					"nameGap":"15",
					"type":"category",
					"axisLine":{"lineStyle":{"color":"#37A0BA"}},
					//"splitLine":{"lineStyle":{"color":"red"}},
					"axisLabel":{"color":"#37A0BA","interval":0,formatter: function (value) {
						return Ysh.Time.formatString(value,'000100');
					}},
					data:xlabel,
					}],	
					"yAxis":[
					{"type":"value",
					"name":"负荷(MW)",
					"axisLine":{"lineStyle":{"color":"#37A0BA"}},
					"splitLine":{show:false},
					"axisLabel":{"color":"#37A0BA","formatter":'{value}'}},
					{"type":"value",
					"name":"电量MWh",
					"axisLine":{"lineStyle":{"color":"#37A0BA"}},
					"splitLine":{"lineStyle":{"color":"#37A0BA"}},
					"axisLabel":{"color":"#37A0BA",showMinLabel:false}}
					],
					"series":[
						{"name":"负荷",
						"type":"bar",
						barWidth:'12',
						"yAxisIndex":0,
						itemStyle: {
							color: "#a90000"
						},
						data:loads,
						},
						{"name":"电量",
						"type":"line",
						"yAxisIndex":1,
						color:'#30B694',
						data:electrics
						},
					],
				}
				return option
			}
			]]>
				</value>
			</list>
		</script>
		<script event="mounted">
			<list type="script">
				<value>
					<![CDATA[
				var start = new Date(Ysh.Time.formatString(new Date(), 111000) + " 00:00:00");
				var end = new Date(Ysh.Time.add('d',1,start))
				this.load_temps(true,() => {
					var oils = []
					var environments = []
					var xlabel = []
					//var resData = ProjectSGC.timeLeftJoin(start,end,'hh',1,this.temps,0,"time");
					this.temps.forEach(temp => {
						oils.push(temp.oil)
						environments.push(temp.environment)
						xlabel.push(temp.time)
					})
					this.tempOption = this.setTempOption(oils,environments,xlabel)
				});
				this.load_loadAndElectric(true,() => {
					var loads = []
					var electrics = []
					var xlabel = []
					//var resData = ProjectSGC.timeLeftJoin(start,end,'hh',1,this.loadAndElectric,0,"time");
					this.loadAndElectric.forEach(temp => {
						loads.push(temp.load)
						electrics.push(temp.electric)
						xlabel.push(temp.time)
					})
					this.electricOption = this.setElectricsOption(loads,electrics,xlabel)
				});
					]]>
				</value>
			</list>
		</script>
	</scripts>
</root>